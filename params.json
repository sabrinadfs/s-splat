{
  "name": "S-SPLat",
  "tagline": "Balancing Soundness and Efficiency for Practical Testing of Configurable Software",
  "body": "### Abstract\r\nTesting configurable systems is important and challenging due to the enormous space of configurations where errors can hide. Existing approaches to test these systems are often costly or unreliable. This paper proposes S-SPLat a technique that combines heuristic sampling with symbolic search to obtain both breadth and depth in the exploration of the configuration space. S-SPLat builds on SPLat, our previously developed technique, that explores all reachable configurations from tests. In contrast to its predecessor, S-SPLat sacrifices soundness in favor of efficiency. We evaluated our technique on eight software product lines of various sizes and on a large configurable system (GCC). Considering the results for GCC, S-SPLat was able to reproduce all five bugs that we previously found in a previous study with SPLat but much faster and it was able to find two new bugs in a recent release of GCC. Results suggest that it is preferable to use a combination of simple heuristics to drive the symbolic search as opposed to a single heuristic that enforces a large set of test requirements. S-SPLat and our experimental infrastructure are publicly available.\r\n\r\n[Sabrina Souto](http://www.cin.ufpe.br/~sfs/), [Marcelo d'Amorim](http://www.cin.ufpe.br/~damorim/), [Rohit Gheyi](http://www.dsc.ufcg.edu.br/~rohit/Rohit_Gheyi/Home.html)\r\n***\r\n\r\n### Artifact Evaluation - ICSE 2017 submission\r\nThe artifact evaluation contains all the artifacts used in this paper, including the source code, the data set and scripts to generate tables and plots. We explain how to reproduce the results using a single virtual machine. If you have any question, please contact sabrinadfs@gmail.com.\r\n\r\n***\r\n### Artifact Setup\r\n\r\n**Download Link**: [s-splat.tar](https://dl.dropboxusercontent.com/u/29543515/s-splat.tar)\r\n\r\n**Prerequisite**:  In order to set up the VM, you need to install a version of [Docker] (https://www.docker.com/).\r\n\r\n**Setup**: Start the Docker default machine and load the image containing our VM image (created on Ubuntu 15.04). After start Docker, start the terminal and run the following commands:\r\n  \r\n      > sudo docker-machine create --driver virtualbox default (create a new Docker VM)\r\n      > sudo docker-machine ls (list your available machines)\r\n      > sudo docker-machine env default (get the environment commands for your new VM)\r\n      > sudo eval \"$(docker-machine env default)\" (connect your shell to the default machine)\r\n      > sudo docker load < /yourpath/s-splat.tar (load our image)\r\n      > sudo docker images (check the available images)\r\n      > sudo docker run -i -t s-splat /bin/bash (run the image)\r\n\r\n\r\n***\r\n### Artifact Organization\r\n\r\n      The important folders and files in the VM image are listed as follows: \r\n      * 1) For SPLs\r\n            * /spls/s-splat: contains the source code of S-SPLat, scripts and library dependencies\r\n            * /spls/s-splat/src-subjects: contains the source code of the SPLs used in our experiments\r\n            * /spls/s-splat/data: the raw data from results of S-SPLat execution will go to this folder\r\n            * /spls/s-splat/plots-figs: the dataset processed from results goes to this folder\r\n      * 2) For GCC\r\n            * /gcc6: contains the instrumented and installed version of GCC 6.1.0 scripts and library dependencies\r\n            * /gcc6/splat: contains the source code the source code of S-SPLat specific for GCC, scripts and library dependencies\r\n      * 3) Datasets\r\n            * /dataset/data-plots: contains a folders for each figure generated from results, where each one of these folders contain the dataset, the correspondent plot(s), and the scripts to generate the plots\r\n            * /dataset/rawdata-results: contains the results from the execution of S-SPLat with SPLs(/dataset/rawdata-results/spls), GCC-6.1.0 (/dataset/rawdata-results/gcc6), and GCC-4.8.2 (/dataset/rawdata-results/gcc4) \r\n\r\n\r\n***\r\n### Replication\r\n***\r\n\r\n#### 1) Experiments for SPLs\r\n\r\nHere is how to run the S-SPLat evaluation against all the subjects we used (companies, desktopsearcher, email, gpl, jtopas, notepad, sudoku, and zipme). The instructions are for our VM image:\r\n\r\n**Running S-SPLat**\r\n\r\n     1. > cd spls/s-splat/\r\n     2. > chmod +x ssplat \r\n     3. > chmod +x runssplat.sh \r\n     4. > ./runssplat.sh (run S-SPLat for all subjects, this may take about 5 days)\r\n     \r\nThe output of S-SPLat execution is stored in /spls/s-splat/data/ (this output contains all configurations sampled by each technique for all tests, and the test results). It will produce a file for each subject and technique, for example: /spls/s-splat/data/gpl_pairwise.txt.\r\n\r\n\r\n**Reproducing Results**\r\n\r\n     1. > chmod +x genstats.jar (inside /spls/s-splat/)\r\n     2. > java -jar genstats.jar (this may take about 10 minutes)\r\n\r\nThe output of genstats.jar execution is stored in /spls/s-splat/plots-figs/samplesize-versus-numfailures/<subject_name>.txt. These sample sets are used to generate Figures 6, 7, and 8 of the paper.\r\n\r\n\r\n***\r\n\r\n#### 2) Experiments for GCC\r\n\r\n**Running S-SPLat**\r\n\r\n     1. > cd /gcc6/splat/\r\n     2. For each technique run this command: \r\n        > ./splat.sh /gcc6/ <technique> \r\n        (<technique>: med, oe, od, pw - example ./splat.sh /gcc6/ oe)\r\n        The execution of S-SPLat for all 4 techniques may take about a week.\r\n\r\nThe output of S-SPLat execution is stored in /gcc6/splat/data/ (this output contains all configurations sampled by each technique for all tests, and the test results). It will produce a file for each technique, for example: /gcc6/splat/data/gcc.pw.txt.\r\n\r\n\r\n\r\n**Reproducing Results**\r\n\r\n     1. > chmod +x genstats.jar (inside /gcc6/splat/)\r\n     2. > java -jar genstats.jar (this may take about 10 minutes)\r\n     \r\nThe output of genstats.jar execution is stored in /gcc6/splat/plots-figs/. These sample sets are used to generate Figures 10 and 11 of the paper.\r\n\r\n***\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}